  it('should respond with {{length description}}{{#if requestMessage}} and {{requestMessage}}{{/if}}', function(done) {
      {{#validateResponse returnType noSchema}}
      /*eslint-disable*/
      {{> schema-partial this}}

      /*eslint-enable*/
      {{/validateResponse}}
      api.del('{{pathify path pathParams}}')
      {{#ifCond queryParameters queryApiKey}}
      .query({
        {{#if queryApiKey}}
        {{queryApiKey.type}}: process.env.{{queryApiKey.name}}{{#if queryParameters}},
        {{/if}}{{/if}}
        {{#if queryParameters}}{{#each queryParameters}}{{#hasWriteParameter this ../requestParameters}}{{this.name}}: {{requestDataParamFormatter this.name this.type ../requestParameters}}{{#unless @last}},{{/unless}}
        {{/hasWriteParameter}}{{/each}}{{/if}}
      })
      {{/ifCond}}
      {{#if headerSecurity}}
      .set('Authorization', '{{headerSecurity.type}} ' + process.env.{{headerSecurity.name}})
      {{/if}}
      .set('Content-Type', '{{contentType}}')
      {{#if headerParameters}}
      .set({
        {{#each headerParameters}}
        '{{this.name}}': {{requestDataParamFormatter this.name 'string' ../requestParameters}}{{#unless @last}},{{/unless}}
        {{/each}}
      })
      {{/if}}
      {{#if headerApiKey}}
      .set('{{headerApiKey.type}}', process.env.{{headerApiKey.name}})
      {{/if}}
      {{#if default}}
      .expect('DEFAULT RESPONSE CODE HERE')
      {{else}}
      .expect({{responseCode}})
      {{/if}}
      .end(function(err, res) {
        if (err) return done(err);

        {{#validateResponse returnType noSchema}}
        {{#isJsonMediaType returnType}}
        {{#is assertion 'expect'}}
        expect(validator.validate(res.body, schema)).to.be.true;
        {{/is}}
        {{#is assertion 'should'}}
        validator.validate(res.body, schema).should.be.true;
        {{/is}}
        {{#is assertion 'assert'}}
        assert.true(validator.validate(res.body, schema));
        {{/is}}
        done();
        {{/isJsonMediaType}}
        {{#isXmlMediaType returnType}}
        var xml2jsConfig = {{xml2jsConfig}};

        parseString(res.text, xml2jsConfig, function(parseErr, result) {
          if(parseErr) return done(parseErr);
        {{#is assertion 'expect'}}
          expect(validator.validate(result, schema)).to.be.true;
        {{/is}}
        {{#is assertion 'should'}}
          validator.validate(result, schema).should.be.true;
        {{/is}}
        {{#is assertion 'assert'}}
          assert.true(validator.validate(result, schema));
        {{/is}}
          done();
        });
        {{/isXmlMediaType}}
        {{else}}
        {{#is assertion 'expect'}}
        expect(res.body).to.equal(null); // non-json response or no schema
        {{/is}}
        {{#is assertion 'should'}}
        res.body.should.equal(null); // non-json response or no schema
        {{/is}}
        {{#is assertion 'assert'}}
        assert.isNull(res.body); // non-json response or no schema
        {{/is}}
            done();
        {{/validateResponse}}
      });
    });
