  it('should respond with {{length description}}{{#if requestMessage}} and {{requestMessage}}{{/if}}', function(done) {
      {{#validateResponse returnType noSchema}}
      /*eslint-disable*/
      {{> schema-partial this}}

      /*eslint-enable*/
      {{/validateResponse}}
      request({
        url: '{{pathify path pathParams}}',
        {{#isJsonRepresentation contentType returnType}}
        json: true,
        {{/isJsonRepresentation}}
        {{#ifCond queryParameters queryApiKey}}
        qs: {
          {{#if queryApiKey}}{{queryApiKey.type}}: process.env.{{queryApiKey.name}}{{#if queryParameters}},
          {{/if}}{{/if}}
        {{#if queryParameters}}{{#each queryParameters}}{{#hasWriteParameter this ../requestParameters}}{{this.name}}: {{requestDataParamFormatter this.name this.type ../requestParameters}}{{#unless @last}},{{/unless}}
        {{/hasWriteParameter}}{{/each}}{{/if}}
        },
        {{/ifCond}}
        method: 'POST',
        headers: {
          'Content-Type': '{{contentType}}'{{#if headerParameters}},
          {{#each headerParameters}}'{{this.name}}': {{requestDataParamFormatter this.name 'string' ../requestParameters}}{{#unless @last}},
          {{/unless}}{{/each}}{{/if}}{{#if headerApiKey}},
          {{headerApiKey.type}}: process.env.{{headerApiKey.name}}{{/if}}{{#if headerSecurity}},
          Authorization: '{{headerSecurity.type}} ' + process.env.{{headerSecurity.name}}{{/if}}
        },
        {{#isJsonMediaType contentType}}
        {{#if request}}body: {{ request }}{{else}}body: {
          {{#each bodyParameters}}
          {{this.name}}: 'DATA GOES HERE'{{#unless @last}},{{/unless}}
          {{/each}}
        }{{/if}}
      },
        {{/isJsonMediaType}}
        {{#is contentType 'application/x-www-form-urlencoded'}}
        form: {
          {{#each formParameters}}
          {{this.name}}: 'DATA GOES HERE'{{#unless @last}},{{/unless}}
          {{/each}}
        }
      },
        {{/is}}
        {{#is contentType 'multipart/form-data'}}
        form: {
          {{#each formParameters}}
          {{this.name}}: 'DATA GOES HERE'{{#unless @last}},{{/unless}}
          {{/each}}
        }
      },
        {{/is}}
        {{#is contentType 'application/xml'}}
        body: 'XML STRING GOES HERE'
      },
        {{/is}}
      function(error, res{{#isNecessaryBody returnType noSchema}}, body{{/isNecessaryBody}}) {
        if (error) return done(error);

      {{#validateResponse returnType noSchema}}
        {{#isJsonMediaType returnType}}
          {{#is assertion 'expect'}}
            expect(validator.validate(body, schema)).to.be.true;
          {{/is}}
          {{#is assertion 'should'}}
            validator.validate(body, schema).should.be.true;
          {{/is}}
          {{#is assertion 'assert'}}
            assert.true(validator.validate(body, schema));
          {{/is}}
          done();
        {{/isJsonMediaType}}
        {{#isXmlMediaType returnType}}
            var xml2jsConfig = {{xml2jsConfig}};

            parseString(res.text, xml2jsConfig, function(parseErr, result) {
              if (parseErr) return done(parseErr);
          {{#is assertion 'expect'}}
              expect(validator.validate(result, schema)).to.be.true;
          {{/is}}
          {{#is assertion 'should'}}
              validator.validate(result, schema).should.be.true;
          {{/is}}
          {{#is assertion 'assert'}}
              assert.true(validator.validate(result, schema));
          {{/is}}
              done();
            });
        {{/isXmlMediaType}}
      {{else}}
        {{#isPdfMediaType returnType}}
          {{#is assertion 'expect'}}
            expect(body.length).to.equal(Number(res.header['content-length']));
          {{/is}}
          {{#is assertion 'should'}}
            body.length.should.equal(Number(res.header['content-length']));
          {{/is}}
          {{#is assertion 'assert'}}
            assert.equal(body.length, Number(res.header['content-length']));
          {{/is}}
        {{else}}
        {{#isHtmlMediaType returnType}}
          {{#is assertion 'expect'}}
            expect(res.text).to.include('<!DOCTYPE html>');
          {{/is}}
          {{#is assertion 'should'}}
            res.text.should.include('<!DOCTYPE html>');
          {{/is}}
          {{#is assertion 'assert'}}
            assert.include(res.text, '<!DOCTYPE html>');
          {{/is}}
        {{else}}
          {{#is assertion 'expect'}}
            expect(body).to.equal(null); // non-json response or no schema
          {{/is}}
          {{#is assertion 'should'}}
            body.should.equal(null); // non-json response or no schema
          {{/is}}
          {{#is assertion 'assert'}}
            assert.isNull(body); // non-json response or no schema
          {{/is}}
          {{/isHtmlMediaType}}
        {{/isPdfMediaType}}
            done();
      {{/validateResponse}}
      });
    });
{{#if isLoadTest}}
    it('load tests with {{length description}}', function(done) {
      arete.loadTest({
        name: '{{loadName}}',
        requests: {{requests}},
        concurrentRequests: {{concurrent}},
        targetFunction: function(callback) {
          request({
            url: '{{pathify path pathParams}}',
            {{#ifCond queryParameters queryApiKey}}
            qs: {
              {{#if queryApiKey}}{{queryApiKey.type}}: process.env.{{queryApiKey.name}}{{#if queryParameters}},
              {{/if}}{{/if}}{{#if queryParameters}}{{#each queryParameters}}{{this.name}}: 'DATA GOES HERE'{{#unless @last}},{{/unless}}{{/each}}{{/if}}
            },
            {{/ifCond}}
            method: 'POST',
            headers: {
              'Content-Type': '{{contentType}}'{{#if headerParameters}},
              {{#each headerParameters}}'{{this.name}}': {{requestDataParamFormatter this.name 'string' ../requestParameters}}{{#unless @last}},{{/unless}}{{/each}}{{/if}}{{#if headerApiKey}},
              {{headerApiKey.type}}: process.env.{{headerApiKey.name}}{{/if}}{{#if headerSecurity}},
              Authorization: '{{headerSecurity.type}} ' + process.env.{{headerSecurity.name}}{{/if}}
            },
            {{#isJsonMediaType contentType}}
            body: {
              {{#each bodyParameters}}
              {{this.name}}: 'DATA GOES HERE'{{#unless @last}},{{/unless}}
              {{/each}}
            }
          },
            {{/isJsonMediaType}}
            {{#is contentType 'application/x-www-form-urlencoded'}}
            form: {
              {{#each formParameters}}
              {{this.name}}: 'DATA GOES HERE'{{#unless @last}},{{/unless}}
              {{/each}}
            }
          },
            {{/is}}
            {{#is contentType 'multipart/form-data'}}
            form: {
              {{#each formParameters}}
              {{this.name}}: 'DATA GOES HERE'{{#unless @last}},{{/unless}}
              {{/each}}
            }
          },
            {{/is}}
            {{#is contentType 'application/xml'}}
            body: 'XML STRING GOES HERE'
          },
            {{/is}}
          function(error, res, body) {
            callback(error, body);
          });
        },
        printResponses: false, // true or false
        printReport: true, // true or false
        printSteps: true, // true or false
        callback: function(error, report) {
          if (error) return done(error);

          {{#is assertion 'expect'}}
          expect(report.successfulResponses.length).
          to.equal(report.results.length);
          expect(report.averageResponseTimeInternal).
          to.be.lessThan('TIME DATA HERE');
          expect(report.timeElapsed).
          to.be.lessThan('TIME DATA HERE');
          {{/is}}
          {{#is assertion 'should'}}
          report.successfulResponses.length.
          should.equal(report.results.length);
          (report.averageResponseTimeInternal).
          should.be.lessThan('TIME DATA HERE');
          (report.timeElapsed).
          should.be.lessThan('TIME DATA HERE');
          {{/is}}
          {{#is assertion 'assert'}}
          assert.equal(report.successfulResponses.length,
          report.results.length);
          assert.isBelow(report.averageResponseTimeInternal,
          'TIME DATA HERE');
          assert.isBelow(report.timeElapsed,
          'TIME DATA HERE');
          {{/is}}
          done();
        }
      });
    });
{{/if}}
